// Generated by CoffeeScript 1.6.2
(function() {
  var Directive, Node, path, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  path = require('path');

  Node = require('./node');

  module.exports = Directive = (function(_super) {
    __extends(Directive, _super);

    function Directive() {
      _ref = Directive.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Directive.prototype.directives = {
      include: function(expression) {
        var context, e, name, statement, _ref1;

        try {
          _ref1 = expression.match(/\s*['"](.*)['"](?:,\s*(.*))?\s*/), _ref1[0], name = _ref1[1], context = _ref1[2];
        } catch (_error) {
          e = _error;
          throw new Error("Failed to parse the include directive from " + expression);
        }
        if (!context) {
          context = 'this';
        }
        statement = (function() {
          switch (this.placement) {
            case 'global':
              return "" + this.namespace + "['" + name + "'].apply(" + context + ")";
            case 'amd':
              return "require('" + name + "').apply(" + context + ")";
            default:
              throw new Error("Include directive not available when placement is " + this.placement);
          }
        }).call(this);
        return this.opener = this.markInsertingCode(statement, false);
      }
    };

    Directive.prototype.evaluate = function() {
      var directives, e, name, rest, _ref1;

      directives = Object.keys(this.directives).join('|');
      try {
        _ref1 = this.expression.match(RegExp("\\+(" + directives + ")(.*)")), _ref1[0], name = _ref1[1], rest = _ref1[2];
      } catch (_error) {
        e = _error;
        throw new Error("Unable to recognize directive from " + this.expression);
      }
      return this.directives[name].call(this, rest);
    };

    return Directive;

  })(Node);

}).call(this);
