// Generated by CoffeeScript 1.6.2
(function() {
  var CoffeeMaker, CoffeeScript, HamlCoffee, fs, red, reset;

  CoffeeScript = require('coffee-script');

  HamlCoffee = require('../haml-coffee');

  fs = require('fs');

  red = '\u001b[31m';

  reset = '\u001b[0m';

  module.exports = CoffeeMaker = (function() {
    function CoffeeMaker() {}

    CoffeeMaker.compileFile = function(filename, compilerOptions, namespace, templateName) {
      var compiler, error, haml, output, source, _ref;

      if (compilerOptions == null) {
        compilerOptions = {};
      }
      if (namespace == null) {
        namespace = null;
      }
      if (templateName == null) {
        templateName = null;
      }
      output = '';
      try {
        source = fs.readFileSync(filename).toString();
      } catch (_error) {
        error = _error;
        console.error("  " + red + "Error opening file:" + reset + " %s", error);
        console.error(error);
      }
      try {
        if (!templateName) {
          templateName = (_ref = filename.match(/([^\.]+)(\.html)?\.haml[c]?$/)) != null ? _ref[1] : void 0;
        }
        compilerOptions.namespace = namespace;
        compilerOptions.name = templateName;
        if (templateName) {
          compiler = new HamlCoffee(compilerOptions);
          compiler.parse(source);
          haml = compiler.render();
        } else {
          console.error("  " + red + "[haml coffee] no valid Haml extension." + reset);
          process.exit(1);
        }
      } catch (_error) {
        error = _error;
        console.error("  " + red + "[haml coffee] error compiling Haml file:" + reset + " %s", error);
        console.error(error.stack);
        process.exit(1);
      }
      try {
        output = CoffeeScript.compile(haml);
      } catch (_error) {
        error = _error;
        console.error('  #{ red }[haml coffee] CoffeeScript compilation error:#{ reset } %s', error);
        console.error(error.stack);
        process.exit(1);
      }
      return output;
    };

    CoffeeMaker.compile = function(source, templateName, namespace, compilerOptions) {
      var compiler, error, haml, output;

      if (namespace == null) {
        namespace = null;
      }
      if (compilerOptions == null) {
        compilerOptions = {};
      }
      output = '';
      compilerOptions.namespace = namespace;
      compilerOptions.name = templateName;
      try {
        if (templateName || compilerOptions.placement === 'amd') {
          compiler = new HamlCoffee(compilerOptions);
          compiler.parse(source);
          haml = compiler.render(templateName, namespace);
        } else {
          console.error("  " + red + "[haml coffee] no template name given." + reset);
          process.exit(1);
        }
      } catch (_error) {
        error = _error;
        console.error("  " + red + "[haml coffee] error compiling Haml file:" + reset + " %s", error);
        console.error(error.stack);
        process.exit(1);
      }
      try {
        output = CoffeeScript.compile(haml);
      } catch (_error) {
        error = _error;
        console.error('  #{ red }[haml coffee] CoffeeScript compilation error:#{ reset } %s', error);
        console.error(error.stack);
        process.exit(1);
      }
      return output;
    };

    return CoffeeMaker;

  })();

}).call(this);
